// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: asset.go
// DO NOT EDIT!

package response

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Asset) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Asset) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "id":`)
	fflib.FormatBits2(buf, uint64(mj.ID), 10, mj.ID < 0)
	buf.WriteByte(',')
	if mj.Required != 0 {
		buf.WriteString(`"required":`)
		fflib.FormatBits2(buf, uint64(mj.Required), 10, mj.Required < 0)
		buf.WriteByte(',')
	}
	if mj.Title != nil {
		if true {
			/* Struct fall back. type=response.Title kind=struct */
			buf.WriteString(`"title":`)
			err = buf.Encode(mj.Title)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if mj.Image != nil {
		if true {
			/* Struct fall back. type=response.Image kind=struct */
			buf.WriteString(`"img":`)
			err = buf.Encode(mj.Image)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if mj.Video != nil {
		if true {
			/* Struct fall back. type=response.Video kind=struct */
			buf.WriteString(`"video":`)
			err = buf.Encode(mj.Video)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if mj.Data != nil {
		if true {
			/* Struct fall back. type=response.Data kind=struct */
			buf.WriteString(`"data":`)
			err = buf.Encode(mj.Data)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if mj.Link != nil {
		if true {
			/* Struct fall back. type=response.Link kind=struct */
			buf.WriteString(`"link":`)
			err = buf.Encode(mj.Link)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if len(mj.Ext) != 0 {
		buf.WriteString(`"ext":`)

		{

			obj, err = mj.Ext.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Assetbase = iota
	ffj_t_Assetno_such_key

	ffj_t_Asset_ID

	ffj_t_Asset_Required

	ffj_t_Asset_Title

	ffj_t_Asset_Image

	ffj_t_Asset_Video

	ffj_t_Asset_Data

	ffj_t_Asset_Link

	ffj_t_Asset_Ext
)

var ffj_key_Asset_ID = []byte("id")

var ffj_key_Asset_Required = []byte("required")

var ffj_key_Asset_Title = []byte("title")

var ffj_key_Asset_Image = []byte("img")

var ffj_key_Asset_Video = []byte("video")

var ffj_key_Asset_Data = []byte("data")

var ffj_key_Asset_Link = []byte("link")

var ffj_key_Asset_Ext = []byte("ext")

func (uj *Asset) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Asset) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Assetbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Assetno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'd':

					if bytes.Equal(ffj_key_Asset_Data, kn) {
						currentKey = ffj_t_Asset_Data
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_Asset_Ext, kn) {
						currentKey = ffj_t_Asset_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Asset_ID, kn) {
						currentKey = ffj_t_Asset_ID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Asset_Image, kn) {
						currentKey = ffj_t_Asset_Image
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_Asset_Link, kn) {
						currentKey = ffj_t_Asset_Link
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_Asset_Required, kn) {
						currentKey = ffj_t_Asset_Required
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_Asset_Title, kn) {
						currentKey = ffj_t_Asset_Title
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffj_key_Asset_Video, kn) {
						currentKey = ffj_t_Asset_Video
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Asset_Ext, kn) {
					currentKey = ffj_t_Asset_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Asset_Link, kn) {
					currentKey = ffj_t_Asset_Link
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Asset_Data, kn) {
					currentKey = ffj_t_Asset_Data
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Asset_Video, kn) {
					currentKey = ffj_t_Asset_Video
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Asset_Image, kn) {
					currentKey = ffj_t_Asset_Image
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Asset_Title, kn) {
					currentKey = ffj_t_Asset_Title
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Asset_Required, kn) {
					currentKey = ffj_t_Asset_Required
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Asset_ID, kn) {
					currentKey = ffj_t_Asset_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Assetno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Asset_ID:
					goto handle_ID

				case ffj_t_Asset_Required:
					goto handle_Required

				case ffj_t_Asset_Title:
					goto handle_Title

				case ffj_t_Asset_Image:
					goto handle_Image

				case ffj_t_Asset_Video:
					goto handle_Video

				case ffj_t_Asset_Data:
					goto handle_Data

				case ffj_t_Asset_Link:
					goto handle_Link

				case ffj_t_Asset_Ext:
					goto handle_Ext

				case ffj_t_Assetno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: uj.ID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.ID = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Required:

	/* handler: uj.Required type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Required = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Title:

	/* handler: uj.Title type=response.Title kind=struct quoted=false*/

	{
		/* Falling back. type=response.Title kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Title)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Image:

	/* handler: uj.Image type=response.Image kind=struct quoted=false*/

	{
		/* Falling back. type=response.Image kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Image)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Video:

	/* handler: uj.Video type=response.Video kind=struct quoted=false*/

	{
		/* Falling back. type=response.Video kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Video)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Data:

	/* handler: uj.Data type=response.Data kind=struct quoted=false*/

	{
		/* Falling back. type=response.Data kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Data)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Link:

	/* handler: uj.Link type=response.Link kind=struct quoted=false*/

	{
		/* Falling back. type=response.Link kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Link)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=openrtb.Extension kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

			state = fflib.FFParse_after_value
			goto mainparse
		}

		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = uj.Ext.UnmarshalJSON(tbuf)
		if err != nil {
			return fs.WrapErr(err)
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
