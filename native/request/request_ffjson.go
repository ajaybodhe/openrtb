// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: request.go
// DO NOT EDIT!

package request

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Request) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Request) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.Ver) != 0 {
		buf.WriteString(`"ver":`)
		fflib.WriteJsonString(buf, string(mj.Ver))
		buf.WriteByte(',')
	}
	if mj.LayoutID != 0 {
		buf.WriteString(`"layout":`)
		fflib.FormatBits2(buf, uint64(mj.LayoutID), 10, mj.LayoutID < 0)
		buf.WriteByte(',')
	}
	if mj.AdUnitID != 0 {
		buf.WriteString(`"adunit":`)
		fflib.FormatBits2(buf, uint64(mj.AdUnitID), 10, mj.AdUnitID < 0)
		buf.WriteByte(',')
	}
	if mj.ContextTypeID != 0 {
		buf.WriteString(`"context":`)
		fflib.FormatBits2(buf, uint64(mj.ContextTypeID), 10, mj.ContextTypeID < 0)
		buf.WriteByte(',')
	}
	if mj.ContextSubTypeID != 0 {
		buf.WriteString(`"contextsubtype":`)
		fflib.FormatBits2(buf, uint64(mj.ContextSubTypeID), 10, mj.ContextSubTypeID < 0)
		buf.WriteByte(',')
	}
	if mj.PlacementTypeID != 0 {
		buf.WriteString(`"plcmttype":`)
		fflib.FormatBits2(buf, uint64(mj.PlacementTypeID), 10, mj.PlacementTypeID < 0)
		buf.WriteByte(',')
	}
	if mj.PlacementCount != 0 {
		buf.WriteString(`"plcmtcnt":`)
		fflib.FormatBits2(buf, uint64(mj.PlacementCount), 10, mj.PlacementCount < 0)
		buf.WriteByte(',')
	}
	if mj.Sequence != 0 {
		buf.WriteString(`"seq":`)
		fflib.FormatBits2(buf, uint64(mj.Sequence), 10, mj.Sequence < 0)
		buf.WriteByte(',')
	}
	buf.WriteString(`"assets":`)
	if mj.Assets != nil {
		buf.WriteString(`[`)
		for i, v := range mj.Assets {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte(',')
	if len(mj.Ext) != 0 {
		buf.WriteString(`"ext":`)

		{

			obj, err = mj.Ext.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Requestbase = iota
	ffj_t_Requestno_such_key

	ffj_t_Request_Ver

	ffj_t_Request_LayoutID

	ffj_t_Request_AdUnitID

	ffj_t_Request_ContextTypeID

	ffj_t_Request_ContextSubTypeID

	ffj_t_Request_PlacementTypeID

	ffj_t_Request_PlacementCount

	ffj_t_Request_Sequence

	ffj_t_Request_Assets

	ffj_t_Request_Ext
)

var ffj_key_Request_Ver = []byte("ver")

var ffj_key_Request_LayoutID = []byte("layout")

var ffj_key_Request_AdUnitID = []byte("adunit")

var ffj_key_Request_ContextTypeID = []byte("context")

var ffj_key_Request_ContextSubTypeID = []byte("contextsubtype")

var ffj_key_Request_PlacementTypeID = []byte("plcmttype")

var ffj_key_Request_PlacementCount = []byte("plcmtcnt")

var ffj_key_Request_Sequence = []byte("seq")

var ffj_key_Request_Assets = []byte("assets")

var ffj_key_Request_Ext = []byte("ext")

func (uj *Request) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Request) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Requestbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Requestno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_Request_AdUnitID, kn) {
						currentKey = ffj_t_Request_AdUnitID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Request_Assets, kn) {
						currentKey = ffj_t_Request_Assets
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffj_key_Request_ContextTypeID, kn) {
						currentKey = ffj_t_Request_ContextTypeID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Request_ContextSubTypeID, kn) {
						currentKey = ffj_t_Request_ContextSubTypeID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_Request_Ext, kn) {
						currentKey = ffj_t_Request_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_Request_LayoutID, kn) {
						currentKey = ffj_t_Request_LayoutID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_Request_PlacementTypeID, kn) {
						currentKey = ffj_t_Request_PlacementTypeID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Request_PlacementCount, kn) {
						currentKey = ffj_t_Request_PlacementCount
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_Request_Sequence, kn) {
						currentKey = ffj_t_Request_Sequence
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffj_key_Request_Ver, kn) {
						currentKey = ffj_t_Request_Ver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Request_Ext, kn) {
					currentKey = ffj_t_Request_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Request_Assets, kn) {
					currentKey = ffj_t_Request_Assets
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Request_Sequence, kn) {
					currentKey = ffj_t_Request_Sequence
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Request_PlacementCount, kn) {
					currentKey = ffj_t_Request_PlacementCount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Request_PlacementTypeID, kn) {
					currentKey = ffj_t_Request_PlacementTypeID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Request_ContextSubTypeID, kn) {
					currentKey = ffj_t_Request_ContextSubTypeID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Request_ContextTypeID, kn) {
					currentKey = ffj_t_Request_ContextTypeID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Request_AdUnitID, kn) {
					currentKey = ffj_t_Request_AdUnitID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Request_LayoutID, kn) {
					currentKey = ffj_t_Request_LayoutID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Request_Ver, kn) {
					currentKey = ffj_t_Request_Ver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Requestno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Request_Ver:
					goto handle_Ver

				case ffj_t_Request_LayoutID:
					goto handle_LayoutID

				case ffj_t_Request_AdUnitID:
					goto handle_AdUnitID

				case ffj_t_Request_ContextTypeID:
					goto handle_ContextTypeID

				case ffj_t_Request_ContextSubTypeID:
					goto handle_ContextSubTypeID

				case ffj_t_Request_PlacementTypeID:
					goto handle_PlacementTypeID

				case ffj_t_Request_PlacementCount:
					goto handle_PlacementCount

				case ffj_t_Request_Sequence:
					goto handle_Sequence

				case ffj_t_Request_Assets:
					goto handle_Assets

				case ffj_t_Request_Ext:
					goto handle_Ext

				case ffj_t_Requestno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Ver:

	/* handler: uj.Ver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Ver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LayoutID:

	/* handler: uj.LayoutID type=request.LayoutID kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for LayoutID", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.LayoutID = LayoutID(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AdUnitID:

	/* handler: uj.AdUnitID type=request.AdUnitID kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for AdUnitID", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.AdUnitID = AdUnitID(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContextTypeID:

	/* handler: uj.ContextTypeID type=request.ContextTypeID kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ContextTypeID", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.ContextTypeID = ContextTypeID(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContextSubTypeID:

	/* handler: uj.ContextSubTypeID type=request.ContextSubTypeID kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ContextSubTypeID", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.ContextSubTypeID = ContextSubTypeID(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PlacementTypeID:

	/* handler: uj.PlacementTypeID type=request.PlacementTypeID kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for PlacementTypeID", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.PlacementTypeID = PlacementTypeID(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PlacementCount:

	/* handler: uj.PlacementCount type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.PlacementCount = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sequence:

	/* handler: uj.Sequence type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Sequence = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Assets:

	/* handler: uj.Assets type=[]request.Asset kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Assets = nil
		} else {

			uj.Assets = []Asset{}

			wantVal := true

			for {

				var tmp_uj__Assets Asset

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Assets type=request.Asset kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

						state = fflib.FFParse_after_value
						goto mainparse
					}

					err = tmp_uj__Assets.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
					if err != nil {
						return err
					}
					state = fflib.FFParse_after_value
				}

				uj.Assets = append(uj.Assets, tmp_uj__Assets)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=openrtb.Extension kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

			state = fflib.FFParse_after_value
			goto mainparse
		}

		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = uj.Ext.UnmarshalJSON(tbuf)
		if err != nil {
			return fs.WrapErr(err)
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
